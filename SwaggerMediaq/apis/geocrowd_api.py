#!/usr/bin/env python
# coding: utf-8

"""
GeocrowdApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from .. import configuration
from ..api_client import ApiClient

class GeocrowdApi(object):

    def __init__(self, api_client=None):
        if api_client:
            self.api_client = api_client
        else:
            if not configuration.api_client:
                configuration.api_client = ApiClient('http://localhost/MediaQ_MVC_V3/api')
            self.api_client = configuration.api_client
    
    
    def accept_task(self, task_id, task_inquiry_id, **kwargs):
        """
        Worker accepts task assignment
        Updates the task assignment that was accepted by worker to be performed

        :param str task_id: The task id (required)
        :param str task_inquiry_id: The task inquiry id (required)
        
        :return: None
        """
        
        # verify the required parameter 'task_id' is set
        if task_id is None:
            raise ValueError("Missing the required parameter `task_id` when calling `accept_task`")
        
        # verify the required parameter 'task_inquiry_id' is set
        if task_inquiry_id is None:
            raise ValueError("Missing the required parameter `task_inquiry_id` when calling `accept_task`")
        
        all_params = ['task_id', 'task_inquiry_id']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method accept_task" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/geocrowd/accept_assignment/tid/{TaskId}/tiid/{TaskInquiryId}'.replace('{format}', 'json')
        method = 'PUT'

        path_params = {}
        
        if 'task_id' in params:
            path_params['TaskId'] = params['task_id']  
        
        if 'task_inquiry_id' in params:
            path_params['TaskInquiryId'] = params['task_inquiry_id']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response=None, auth_settings=auth_settings)
        
    def reject_task(self, task_id, task_inquiry_id, **kwargs):
        """
        Worker rejects task assignment
        Update the task assignment that was rejected by worker

        :param str task_id: The task id (required)
        :param str task_inquiry_id: The task inquiry id (required)
        
        :return: None
        """
        
        # verify the required parameter 'task_id' is set
        if task_id is None:
            raise ValueError("Missing the required parameter `task_id` when calling `reject_task`")
        
        # verify the required parameter 'task_inquiry_id' is set
        if task_inquiry_id is None:
            raise ValueError("Missing the required parameter `task_inquiry_id` when calling `reject_task`")
        
        all_params = ['task_id', 'task_inquiry_id']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method reject_task" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/geocrowd/reject_assignment/tid/{TaskId}/tiid/{TaskInquiryId}'.replace('{format}', 'json')
        method = 'PUT'

        path_params = {}
        
        if 'task_id' in params:
            path_params['TaskId'] = params['task_id']  
        
        if 'task_inquiry_id' in params:
            path_params['TaskInquiryId'] = params['task_inquiry_id']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response=None, auth_settings=auth_settings)
        
    def create_task(self, title, description, expiry, reward, maxhits, type, lat, lon, **kwargs):
        """
        Create a new task
        Create a new task given the details provided

        :param str title: the task'stle (required)
        :param str description: the task's detailed description (required)
        :param str expiry: the task's expiry date (required)
        :param Number reward: the task's reward value (required)
        :param int maxhits: how many times to be performed (required)
        :param str type: the task's content type (required)
        :param Number lat: the task's latitude (required)
        :param Number lon: the task's longitude (required)
        
        :return: None
        """
        
        # verify the required parameter 'title' is set
        if title is None:
            raise ValueError("Missing the required parameter `title` when calling `create_task`")
        
        # verify the required parameter 'description' is set
        if description is None:
            raise ValueError("Missing the required parameter `description` when calling `create_task`")
        
        # verify the required parameter 'expiry' is set
        if expiry is None:
            raise ValueError("Missing the required parameter `expiry` when calling `create_task`")
        
        # verify the required parameter 'reward' is set
        if reward is None:
            raise ValueError("Missing the required parameter `reward` when calling `create_task`")
        
        # verify the required parameter 'maxhits' is set
        if maxhits is None:
            raise ValueError("Missing the required parameter `maxhits` when calling `create_task`")
        
        # verify the required parameter 'type' is set
        if type is None:
            raise ValueError("Missing the required parameter `type` when calling `create_task`")
        
        # verify the required parameter 'lat' is set
        if lat is None:
            raise ValueError("Missing the required parameter `lat` when calling `create_task`")
        
        # verify the required parameter 'lon' is set
        if lon is None:
            raise ValueError("Missing the required parameter `lon` when calling `create_task`")
        
        all_params = ['title', 'description', 'expiry', 'reward', 'maxhits', 'type', 'lat', 'lon']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method create_task" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/geocrowd/task'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        if 'title' in params:
            form_params['title'] = params['title']
        
        if 'description' in params:
            form_params['description'] = params['description']
        
        if 'expiry' in params:
            form_params['expiry'] = params['expiry']
        
        if 'reward' in params:
            form_params['reward'] = params['reward']
        
        if 'maxhits' in params:
            form_params['maxhits'] = params['maxhits']
        
        if 'type' in params:
            form_params['type'] = params['type']
        
        if 'lat' in params:
            form_params['lat'] = params['lat']
        
        if 'lon' in params:
            form_params['lon'] = params['lon']
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response=None, auth_settings=auth_settings)
        









