#!/usr/bin/env python
# coding: utf-8

"""
VideosApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from .. import configuration
from ..api_client import ApiClient

class VideosApi(object):

    def __init__(self, api_client=None):
        if api_client:
            self.api_client = api_client
        else:
            if not configuration.api_client:
                configuration.api_client = ApiClient('http://localhost/MediaQ_MVC_V3/api')
            self.api_client = configuration.api_client
    
    
    def upload_metadata(self, userfile, **kwargs):
        """
        Uploads video metadata
        Upload video metadata to the server

        :param File userfile: the metadata file (required)
        
        :return: None
        """
        
        # verify the required parameter 'userfile' is set
        if userfile is None:
            raise ValueError("Missing the required parameter `userfile` when calling `upload_metadata`")
        
        all_params = ['userfile']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method upload_metadata" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/videos/upload_metadata'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        if 'userfile' in params:
            files['userfile'] = params['userfile']
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response=None, auth_settings=auth_settings)
        
    def upload_video(self, userfile, **kwargs):
        """
        Uploads a new video
        Upload a new video to the server

        :param File userfile: the video file (required)
        
        :return: None
        """
        
        # verify the required parameter 'userfile' is set
        if userfile is None:
            raise ValueError("Missing the required parameter `userfile` when calling `upload_video`")
        
        all_params = ['userfile']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method upload_video" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/videos/upload_video'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        if 'userfile' in params:
            files['userfile'] = params['userfile']
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json', 'application/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response=None, auth_settings=auth_settings)
        
    def get_video_by_id(self, video_id, **kwargs):
        """
        Find a video by id
        Returns a video based on id

        :param str video_id: the video id (required)
        
        :return: None
        """
        
        # verify the required parameter 'video_id' is set
        if video_id is None:
            raise ValueError("Missing the required parameter `video_id` when calling `get_video_by_id`")
        
        all_params = ['video_id']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method get_video_by_id" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/videos/video/id/{VideoId}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        if 'video_id' in params:
            path_params['VideoId'] = params['video_id']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response=None, auth_settings=auth_settings)
        
    def delete_video(self, video_id, **kwargs):
        """
        Delete a video by id
        Delete the video with the given id

        :param str video_id: the video id (required)
        
        :return: None
        """
        
        # verify the required parameter 'video_id' is set
        if video_id is None:
            raise ValueError("Missing the required parameter `video_id` when calling `delete_video`")
        
        all_params = ['video_id']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method delete_video" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/videos/video/id/{VideoId}'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        
        if 'video_id' in params:
            path_params['VideoId'] = params['video_id']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response=None, auth_settings=auth_settings)
        
    def get_video_metadata_by_id(self, video_metadata_id, **kwargs):
        """
        Find video metadata by id
        Returns video metadata based on id

        :param str video_metadata_id: the video metadata id (required)
        
        :return: None
        """
        
        # verify the required parameter 'video_metadata_id' is set
        if video_metadata_id is None:
            raise ValueError("Missing the required parameter `video_metadata_id` when calling `get_video_metadata_by_id`")
        
        all_params = ['video_metadata_id']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method get_video_metadata_by_id" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/videos/video_metadata/id/{VideoMetadataId}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        if 'video_metadata_id' in params:
            path_params['VideoMetadataId'] = params['video_metadata_id']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response=None, auth_settings=auth_settings)
        









