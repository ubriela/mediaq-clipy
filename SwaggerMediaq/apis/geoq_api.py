#!/usr/bin/env python
# coding: utf-8

"""
GeoqApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from .. import configuration
from ..api_client import ApiClient

class GeoqApi(object):

    def __init__(self, api_client=None):
        if api_client:
            self.api_client = api_client
        else:
            if not configuration.api_client:
                configuration.api_client = ApiClient('http://localhost/MediaQ_MVC_V3/api')
            self.api_client = configuration.api_client
    
    
    def cellid2videos(self, cellid, **kwargs):
        """
        Returns a set of videos covering a cell
        Returns a set of videos covering a cell.

        :param str cellid: Cell Id (required)
        
        :return: str
        """
        
        # verify the required parameter 'cellid' is set
        if cellid is None:
            raise ValueError("Missing the required parameter `cellid` when calling `cellid2videos`")
        
        all_params = ['cellid']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method cellid2videos" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/geoq/cellid2videos'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        query_params = {}
        
        if 'cellid' in params:
            query_params['cellid'] = params['cellid']
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json', 'application/xml', 'text/html', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='str', auth_settings=auth_settings)
        
        return response
        
    def circle_statistic(self, lat, lng, **kwargs):
        """
        Heatmap information of a region
        Returns a set of cells with the number of video counts

        :param str lat: Latitude (required)
        :param str lng: Longitude (required)
        :param str startdate: Start Date 
        :param str enddate: End Date 
        
        :return: str
        """
        
        # verify the required parameter 'lat' is set
        if lat is None:
            raise ValueError("Missing the required parameter `lat` when calling `circle_statistic`")
        
        # verify the required parameter 'lng' is set
        if lng is None:
            raise ValueError("Missing the required parameter `lng` when calling `circle_statistic`")
        
        all_params = ['lat', 'lng', 'startdate', 'enddate']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method circle_statistic" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/geoq/circle_statistic'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        query_params = {}
        
        if 'lat' in params:
            query_params['lat'] = params['lat']
        
        if 'lng' in params:
            query_params['lng'] = params['lng']
        
        if 'startdate' in params:
            query_params['startdate'] = params['startdate']
        
        if 'enddate' in params:
            query_params['enddate'] = params['enddate']
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json', 'application/xml', 'text/html', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='str', auth_settings=auth_settings)
        
        return response
        
    def rectangle_query(self, swlat, swlng, nelat, nelng, **kwargs):
        """
        Returns a set of videos
        Returns a set of video locations with corresponding time and link to mediaq

        :param str swlat: South-West Latitude (required)
        :param str swlng: South-West Longitude (required)
        :param str nelat: North-East Latitude (required)
        :param str nelng: North-East Longitude (required)
        :param str startdate: Start Date 
        :param str enddate: End Date 
        
        :return: str
        """
        
        # verify the required parameter 'swlat' is set
        if swlat is None:
            raise ValueError("Missing the required parameter `swlat` when calling `rectangle_query`")
        
        # verify the required parameter 'swlng' is set
        if swlng is None:
            raise ValueError("Missing the required parameter `swlng` when calling `rectangle_query`")
        
        # verify the required parameter 'nelat' is set
        if nelat is None:
            raise ValueError("Missing the required parameter `nelat` when calling `rectangle_query`")
        
        # verify the required parameter 'nelng' is set
        if nelng is None:
            raise ValueError("Missing the required parameter `nelng` when calling `rectangle_query`")
        
        all_params = ['swlat', 'swlng', 'nelat', 'nelng', 'startdate', 'enddate']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method rectangle_query" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/geoq/rectangle_query'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        query_params = {}
        
        if 'swlat' in params:
            query_params['swlat'] = params['swlat']
        
        if 'swlng' in params:
            query_params['swlng'] = params['swlng']
        
        if 'nelat' in params:
            query_params['nelat'] = params['nelat']
        
        if 'nelng' in params:
            query_params['nelng'] = params['nelng']
        
        if 'startdate' in params:
            query_params['startdate'] = params['startdate']
        
        if 'enddate' in params:
            query_params['enddate'] = params['enddate']
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json', 'application/xml', 'text/html', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='str', auth_settings=auth_settings)
        
        return response
        
    def rectangle_query_image(self, swlat, swlng, nelat, nelng, **kwargs):
        """
        Returns a set of images
        Returns a set of images with corresponding time and link to mediaq

        :param str swlat: South-West Latitude (required)
        :param str swlng: South-West Longitude (required)
        :param str nelat: North-East Latitude (required)
        :param str nelng: North-East Longitude (required)
        :param str startdate: Start Date 
        :param str enddate: End Date 
        
        :return: str
        """
        
        # verify the required parameter 'swlat' is set
        if swlat is None:
            raise ValueError("Missing the required parameter `swlat` when calling `rectangle_query_image`")
        
        # verify the required parameter 'swlng' is set
        if swlng is None:
            raise ValueError("Missing the required parameter `swlng` when calling `rectangle_query_image`")
        
        # verify the required parameter 'nelat' is set
        if nelat is None:
            raise ValueError("Missing the required parameter `nelat` when calling `rectangle_query_image`")
        
        # verify the required parameter 'nelng' is set
        if nelng is None:
            raise ValueError("Missing the required parameter `nelng` when calling `rectangle_query_image`")
        
        all_params = ['swlat', 'swlng', 'nelat', 'nelng', 'startdate', 'enddate']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method rectangle_query_image" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/geoq/rectangle_query_image'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        query_params = {}
        
        if 'swlat' in params:
            query_params['swlat'] = params['swlat']
        
        if 'swlng' in params:
            query_params['swlng'] = params['swlng']
        
        if 'nelat' in params:
            query_params['nelat'] = params['nelat']
        
        if 'nelng' in params:
            query_params['nelng'] = params['nelng']
        
        if 'startdate' in params:
            query_params['startdate'] = params['startdate']
        
        if 'enddate' in params:
            query_params['enddate'] = params['enddate']
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json', 'application/xml', 'text/html', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='str', auth_settings=auth_settings)
        
        return response
        
    def rectangle_statistic(self, swlat, swlng, nelat, nelng, **kwargs):
        """
        Heatmap information of a region
        Returns a set of cells with the number of video counts

        :param str swlat: South-West Latitude (required)
        :param str swlng: South-West Longitude (required)
        :param str nelat: North-East Latitude (required)
        :param str nelng: North-East Longitude (required)
        :param str startdate: Start Date 
        :param str enddate: End Date 
        
        :return: str
        """
        
        # verify the required parameter 'swlat' is set
        if swlat is None:
            raise ValueError("Missing the required parameter `swlat` when calling `rectangle_statistic`")
        
        # verify the required parameter 'swlng' is set
        if swlng is None:
            raise ValueError("Missing the required parameter `swlng` when calling `rectangle_statistic`")
        
        # verify the required parameter 'nelat' is set
        if nelat is None:
            raise ValueError("Missing the required parameter `nelat` when calling `rectangle_statistic`")
        
        # verify the required parameter 'nelng' is set
        if nelng is None:
            raise ValueError("Missing the required parameter `nelng` when calling `rectangle_statistic`")
        
        all_params = ['swlat', 'swlng', 'nelat', 'nelng', 'startdate', 'enddate']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method rectangle_statistic" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/geoq/rectangle_statistic'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        query_params = {}
        
        if 'swlat' in params:
            query_params['swlat'] = params['swlat']
        
        if 'swlng' in params:
            query_params['swlng'] = params['swlng']
        
        if 'nelat' in params:
            query_params['nelat'] = params['nelat']
        
        if 'nelng' in params:
            query_params['nelng'] = params['nelng']
        
        if 'startdate' in params:
            query_params['startdate'] = params['startdate']
        
        if 'enddate' in params:
            query_params['enddate'] = params['enddate']
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json', 'application/xml', 'text/html', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='str', auth_settings=auth_settings)
        
        return response
        
    def sample_fovs(self, **kwargs):
        """
        Returns a set of video frames
        Returns metadata of individual video frames, from which it is possible to construct geospatial features of a video such as it's trajectory and coverage.

        
        :return: str
        """
        
        all_params = []

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method sample_fovs" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/geoq/sample_fovs'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json', 'application/xml', 'text/html', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='str', auth_settings=auth_settings)
        
        return response
        
    def sample_videos(self, **kwargs):
        """
        Returns a set of videos
        Returns a set of video locations with corresponding time and link to mediaq

        
        :return: str
        """
        
        all_params = []

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method sample_videos" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/geoq/sample_videos'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json', 'application/xml', 'text/html', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='str', auth_settings=auth_settings)
        
        return response
        
    def test_swagger(self, **kwargs):
        """
        Test
        Test

        
        :return: str
        """
        
        all_params = []

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method test_swagger" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/geoq/test_swagger'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json', 'application/xml', 'text/html', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='str', auth_settings=auth_settings)
        
        return response
        
    def video_metadata(self, vid, **kwargs):
        """
        Returns a set of video frames
        Returns metadata of individual video frames, from which it is possible to construct geospatial features of a video such as it's trajectory and coverage.

        :param str vid: Hashed Video Id (required)
        
        :return: str
        """
        
        # verify the required parameter 'vid' is set
        if vid is None:
            raise ValueError("Missing the required parameter `vid` when calling `video_metadata`")
        
        all_params = ['vid']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method video_metadata" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/geoq/video_metadata'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        query_params = {}
        
        if 'vid' in params:
            query_params['vid'] = params['vid']
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json', 'application/xml', 'text/html', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='str', auth_settings=auth_settings)
        
        return response
        
    def video_metadata2(self, vid, **kwargs):
        """
        Returns a set of video frames
        Returns metadata of individual video frames, from which it is possible to construct geospatial features of a video such as it's trajectory and coverage.

        :param str vid: Hashed Video Id (required)
        
        :return: str
        """
        
        # verify the required parameter 'vid' is set
        if vid is None:
            raise ValueError("Missing the required parameter `vid` when calling `video_metadata2`")
        
        all_params = ['vid']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method video_metadata2" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/geoq/video_metadata2'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        query_params = {}
        
        if 'vid' in params:
            query_params['vid'] = params['vid']
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json', 'application/xml', 'text/html', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='str', auth_settings=auth_settings)
        
        return response
        
    def video_segment_url(self, vid, start_frame, end_frame, **kwargs):
        """
        Returns an url to view video on mediaq
        Returns an url to view video on mediaq.

        :param str vid: Hashed Video Id (required)
        :param int start_frame: Start Frame (required)
        :param int end_frame: Start Frame (required)
        
        :return: str
        """
        
        # verify the required parameter 'vid' is set
        if vid is None:
            raise ValueError("Missing the required parameter `vid` when calling `video_segment_url`")
        
        # verify the required parameter 'start_frame' is set
        if start_frame is None:
            raise ValueError("Missing the required parameter `start_frame` when calling `video_segment_url`")
        
        # verify the required parameter 'end_frame' is set
        if end_frame is None:
            raise ValueError("Missing the required parameter `end_frame` when calling `video_segment_url`")
        
        all_params = ['vid', 'start_frame', 'end_frame']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method video_segment_url" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/geoq/video_segment_url'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        query_params = {}
        
        if 'vid' in params:
            query_params['vid'] = params['vid']
        
        if 'start_frame' in params:
            query_params['startFrame'] = params['start_frame']
        
        if 'end_frame' in params:
            query_params['endFrame'] = params['end_frame']
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json', 'application/xml', 'text/html', 'text/xml'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='str', auth_settings=auth_settings)
        
        return response
        









