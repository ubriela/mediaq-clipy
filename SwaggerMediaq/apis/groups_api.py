#!/usr/bin/env python
# coding: utf-8

"""
GroupsApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from .. import configuration
from ..api_client import ApiClient

class GroupsApi(object):

    def __init__(self, api_client=None):
        if api_client:
            self.api_client = api_client
        else:
            if not configuration.api_client:
                configuration.api_client = ApiClient('http://localhost/MediaQ_MVC_V3/api')
            self.api_client = configuration.api_client
    
    
    def get_groups(self, **kwargs):
        """
        Get all groups
        Returns all groups

        
        :return: None
        """
        
        all_params = []

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method get_groups" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/groups'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response=None, auth_settings=auth_settings)
        
    def create_group(self, name, **kwargs):
        """
        Create a new group
        Creates a new group with the name and description provided

        :param str name: the group's name (required)
        :param str description: the group's description 
        
        :return: None
        """
        
        # verify the required parameter 'name' is set
        if name is None:
            raise ValueError("Missing the required parameter `name` when calling `create_group`")
        
        all_params = ['name', 'description']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method create_group" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/groups'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        if 'name' in params:
            form_params['name'] = params['name']
        
        if 'description' in params:
            form_params['description'] = params['description']
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response=None, auth_settings=auth_settings)
        
    def get_group_by_id(self, group_id, **kwargs):
        """
        Find a group by id
        Returns a group based on id

        :param str group_id: the group's id (required)
        
        :return: None
        """
        
        # verify the required parameter 'group_id' is set
        if group_id is None:
            raise ValueError("Missing the required parameter `group_id` when calling `get_group_by_id`")
        
        all_params = ['group_id']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method get_group_by_id" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/groups/group/id/{GroupId}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        if 'group_id' in params:
            path_params['GroupId'] = params['group_id']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response=None, auth_settings=auth_settings)
        
    def update_group(self, group_id, **kwargs):
        """
        Update the group with the given id
        Update group with the name and description provided

        :param str group_id: the group's id (required)
        :param str name: the group's name 
        :param str description: the group's description 
        
        :return: None
        """
        
        # verify the required parameter 'group_id' is set
        if group_id is None:
            raise ValueError("Missing the required parameter `group_id` when calling `update_group`")
        
        all_params = ['group_id', 'name', 'description']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method update_group" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/groups/group/id/{GroupId}'.replace('{format}', 'json')
        method = 'PUT'

        path_params = {}
        
        if 'group_id' in params:
            path_params['GroupId'] = params['group_id']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        if 'name' in params:
            form_params['name'] = params['name']
        
        if 'description' in params:
            form_params['description'] = params['description']
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response=None, auth_settings=auth_settings)
        
    def delete_group(self, group_id, **kwargs):
        """
        Delete a group based on id
        Delete the group with the given id. Only the owner can delete it

        :param str group_id: the group's id (required)
        
        :return: None
        """
        
        # verify the required parameter 'group_id' is set
        if group_id is None:
            raise ValueError("Missing the required parameter `group_id` when calling `delete_group`")
        
        all_params = ['group_id']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method delete_group" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/groups/group/id/{GroupId}'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        
        if 'group_id' in params:
            path_params['GroupId'] = params['group_id']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response=None, auth_settings=auth_settings)
        
    def get_group_users(self, group_id, **kwargs):
        """
        Get all group's users
        Returns all the users related to the group with the given id

        :param str group_id: the group's id (required)
        
        :return: None
        """
        
        # verify the required parameter 'group_id' is set
        if group_id is None:
            raise ValueError("Missing the required parameter `group_id` when calling `get_group_users`")
        
        all_params = ['group_id']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method get_group_users" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/groups/group_users/id/{GroupId}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        if 'group_id' in params:
            path_params['GroupId'] = params['group_id']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response=None, auth_settings=auth_settings)
        
    def get_group_users_by_status(self, group_id, subscription_status, **kwargs):
        """
        Get group's users given the status
        Returns the users of a group with the given id and subscription status

        :param str group_id: the group's id (required)
        :param str subscription_status: the user subscription status for the group (required)
        
        :return: None
        """
        
        # verify the required parameter 'group_id' is set
        if group_id is None:
            raise ValueError("Missing the required parameter `group_id` when calling `get_group_users_by_status`")
        
        # verify the required parameter 'subscription_status' is set
        if subscription_status is None:
            raise ValueError("Missing the required parameter `subscription_status` when calling `get_group_users_by_status`")
        
        all_params = ['group_id', 'subscription_status']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method get_group_users_by_status" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/groups/group_users/id/{GroupId}/status/{SubscriptionStatus}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        if 'group_id' in params:
            path_params['GroupId'] = params['group_id']  
        
        if 'subscription_status' in params:
            path_params['SubscriptionStatus'] = params['subscription_status']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response=None, auth_settings=auth_settings)
        
    def get_user_subscribed_groups(self, **kwargs):
        """
        Find user's subscribed groups
        Returns the groups the logged in user is subscribed to

        
        :return: None
        """
        
        all_params = []

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method get_user_subscribed_groups" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/groups/subscribed'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response=None, auth_settings=auth_settings)
        
    def get_user_groups(self, **kwargs):
        """
        Get all user's groups
        Returns all the groups related to the user

        
        :return: None
        """
        
        all_params = []

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method get_user_groups" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/groups/user_groups'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response=None, auth_settings=auth_settings)
        
    def get_user_groups_by_status(self, subscription_status, **kwargs):
        """
        Get user's groups given the status
        Returns the user's groups with the given subscription status

        :param str subscription_status: the user subscription status for the groups (required)
        
        :return: None
        """
        
        # verify the required parameter 'subscription_status' is set
        if subscription_status is None:
            raise ValueError("Missing the required parameter `subscription_status` when calling `get_user_groups_by_status`")
        
        all_params = ['subscription_status']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method get_user_groups_by_status" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/groups/user_groups/status/{SubscriptionStatus}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        if 'subscription_status' in params:
            path_params['SubscriptionStatus'] = params['subscription_status']  
        
        query_params = {}
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response=None, auth_settings=auth_settings)
        









